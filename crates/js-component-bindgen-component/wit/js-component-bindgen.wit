default world js-component-bindgen-component {
  export exports: interface {
    type files = list<tuple<string, list<u8>>>
    type maps = list<tuple<string, string>>

    record generate-options {
      /// Name to use for the generated component
      name: string,

      /// Disables generation of `*.d.ts` files and instead only generates `*.js`
      /// source files.
      no-typescript: option<bool>,

      /// Provide a custom JS instantiation API for the component instead
      /// of the direct importable native ESM output.
      instantiation: option<bool>,
 
      /// Mappings of component import specifiers to JS import specifiers.
      map: option<maps>,

      /// Enables all compat flags: --tla-compat.
      compat: option<bool>,

      /// Disables compatibility in Node.js without a fetch global.
      no-nodejs-compat: option<bool>,

      /// Set the cutoff byte size for base64 inlining core Wasm in instantiation mode
      /// (set to 0 to disable all base64 inlining)
      base64-cutoff: option<u32>,

      /// Enables compatibility for JS environments without top-level await support
      /// via an async $init promise export to wait for instead.
      tla-compat: option<bool>,

      /// Disable verification of component Wasm data structures when
      /// lifting as a production optimization
      valid-lifting-optimization: option<bool>,
    }

    enum export-type {
      function,
      instance,
    }

    record transpiled {
      files: files,
      imports: list<string>,
      exports: list<tuple<string, export-type>>
    }

    /// Generate the file structure for the transpilation of a component
    /// into a JS embedding, returns the file list and imports and exports of the
    /// output JS transpiled component
    generate: func(component: list<u8>, options: generate-options) -> result<transpiled, string>
  }
}
