default world wasm-tools-js {
  import console: pkg.console

  export exports: interface {
    /// Translate the WebAssembly text format to binary
    parse: func(wat: string) -> result<list<u8>, string>

    /// Translate the WebAssembly binary format to text
    print: func(binary: list<u8>) -> result<string, string>

    enum string-encoding {
      utf8,
      utf16,
      compact-utf16
    }

    /// Create a component from a core wasm binary
    component-new: func(binary: list<u8>, adapters: option<list<tuple<string, list<u8>>>>) -> result<list<u8>, string>

    /// Extract a *.wit interface from a component, optionally providing a document name to extract
    component-wit: func(binary: list<u8>, document: option<string>) -> result<string, string>

    /// Extract the core modules from a component
    /// (strictly speaking this makes it Wasm Tools + Extract Core Modules)
    extract-core-modules: func(component: list<u8>) -> result<list<tuple<u32, u32>>, string>
  }
}
