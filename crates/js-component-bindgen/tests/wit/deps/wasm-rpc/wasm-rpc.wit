package golem:rpc@0.1.0;

interface types {
  type node-index = s32;

  record wit-value {
    nodes: list<wit-node>,
  }

  variant wit-node {
    record-value(list<node-index>),
    variant-value(tuple<u32, option<node-index>>),
    enum-value(u32),
    flags-value(list<bool>),
    tuple-value(list<node-index>),
    list-value(list<node-index>),
    option-value(option<node-index>),
    result-value(result<option<node-index>, option<node-index>>),
    prim-u8(u8),
    prim-u16(u16),
    prim-u32(u32),
    prim-u64(u64),
    prim-s8(s8),
    prim-s16(s16),
    prim-s32(s32),
    prim-s64(s64),
    prim-float32(float32),
    prim-float64(float64),
    prim-char(char),
    prim-bool(bool),
    prim-string(string),
    handle(tuple<uri, u64>)
  }

  record uri {
    value: string,
  }

  variant rpc-error {
    protocol-error(string),
    denied(string),
    not-found(string),
    remote-internal-error(string)
  }

  resource wasm-rpc {
    constructor(location: uri);

    invoke-and-await: func(function-name: string, function-params: list<wit-value>) -> result<wit-value, rpc-error>;
    invoke: func(function-name: string, function-params: list<wit-value>) -> result<_, rpc-error>;
  }
}

world wit-value {
    import types;
}
